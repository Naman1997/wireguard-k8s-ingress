---
- name: Configure SSH
  hosts: all
  gather_facts: no
  tasks:
    - name: Install Wireguard
      become: yes
      ansible.builtin.package:
        name: wireguard-tools
        state: present
      register: result
      until: result is success
      retries: 5
      delay: 10

- hosts: proxy
  become: yes
  tasks:
    - name: Generate Wireguard keys on proxy
      shell: "wg genkey | tee privatekey_proxy | wg pubkey > publickey_proxy"
      args:
        chdir: "/etc/wireguard"
    - name: Get public key of proxy
      slurp:
        src: /etc/wireguard/publickey_proxy
      register: public_key_proxy
    - name: Get private key of proxy
      slurp:
        src: /etc/wireguard/privatekey_proxy
      register: private_key_proxy

- hosts: gateway
  become: yes
  tasks:
    - name: Get internet-facing interface from gateway
      shell: "ip route get 8.8.8.8 | awk '/dev/ { print $5 }'"
      register: gateway_internet_interface
    - name: Generate Wireguard keys
      shell: "wg genkey | tee privatekey_gateway | wg pubkey > publickey_gateway"
      args:
        chdir: "/etc/wireguard"
    - name: Make directory for helper scripts
      shell: "mkdir -p /etc/wireguard/helper"
    - name: Generate helper script - 1
      template:
        src: "../templates/iptables/add-nat-routing.sh"
        dest: "/etc/wireguard/helper/add-nat-routing.sh"
      vars:
        interface: "{{ gateway_internet_interface.stdout }}"
    - name: Generate helper script - 2
      template:
        src: "../templates/iptables/remove-nat-routing.sh"
        dest: "/etc/wireguard/helper/remove-nat-routing.sh"
      vars:
        interface: "{{ gateway_internet_interface.stdout }}"
    - name: Make helper scripts executable
      shell: "chmod +x /etc/wireguard/helper/add-nat-routing.sh && chmod +x /etc/wireguard/helper/remove-nat-routing.sh"
    - name: Get public key of gateway
      slurp:
        src: /etc/wireguard/publickey_gateway
      register: public_key_gateway
    - name: Get private key of gateway
      slurp:
        src: /etc/wireguard/privatekey_gateway
      register: private_key_gateway

- hosts: proxy
  become: yes
  tasks:
    - name: Remove any older connection
      shell: "wg-quick down wg0 && sleep 5"
      ignore_errors: yes
    - name: Generate proxy wg0.conf file
      template:
        src: "../templates/wireguard/wg0_proxy.conf.template"
        dest: "/etc/wireguard/wg0.conf"
      vars:
        public_key: "{{ hostvars.gateway.public_key_gateway['content'] | b64decode }}"
        private_key: "{{ private_key_proxy['content'] | b64decode }}"
    - name: Startup connection
      shell: "wg-quick up wg0"
    - name: Enable wg service
      shell: "systemctl enable wg-quick@wg0"

- hosts: gateway
  become: yes
  tasks:
    - name: Remove any older connection
      shell: "wg-quick down wg0 && sleep 5"
      ignore_errors: yes
    - name: Generate gateway wg0.conf file
      template:
        src: "../templates/wireguard/wg0_gateway.conf.template"
        dest: "/etc/wireguard/wg0.conf"
      vars:
        public_key: "{{ hostvars.proxy.public_key_proxy['content'] | b64decode }}"
        private_key: "{{ private_key_gateway['content'] | b64decode }}"
        interface: "{{ gateway_internet_interface.stdout }}"
    - name: Startup connection
      shell: "wg-quick up wg0"
    - name: Enable wg service
      shell: "systemctl enable wg-quick@wg0"
    - name: Ping the proxy
      shell: "sleep 5 && ping -c 1 10.20.0.2"